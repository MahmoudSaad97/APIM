/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-07-09 09:50:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.mgt.constants.SelfRegistrationStatusCodes;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.recovery.IdentityRecoveryConstants;
import org.wso2.carbon.identity.base.IdentityRuntimeException;
import org.wso2.carbon.identity.recovery.util.Utils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties;
import org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.UsernameRecoveryApi;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.Claim;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.User;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import org.json.JSONObject;
import org.wso2.carbon.identity.mgt.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import java.util.Map;
import java.util.HashMap;

public final class self_002dregistration_002dwith_002dverification_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Retrieve all county codes and country display names and
     * store into a map where key/value pair is defined as the
     * country code/country display name.
     *
     * @return {Map<string, string>}
     */
    private Map<String, String> getCountryList() {
        String[] countryCodes = Locale.getISOCountries();
        Map<String, String> mapCountries = new TreeMap<>();
        for (String countryCode : countryCodes) {
            Locale locale = new Locale("", countryCode);
            String country_code = locale.getCountry();
            String country_display_name = locale.getDisplayCountry();
            mapCountries.put(country_code, country_display_name);
        }
        return mapCountries;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("/tenant-resolve.jsp", Long.valueOf(1709439816000L));
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1709439710000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1709439816000L));
    _jspx_dependants.put("jar:file:/C:/Users/mahmouds.abdelhamid/Downloads/wso2am-4.3.0%20(1)/wso2am-4.3.0/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425967870000L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar", Long.valueOf(1709439648000L));
    _jspx_dependants.put("jar:file:/C:/Users/mahmouds.abdelhamid/Downloads/wso2am-4.3.0%20(1)/wso2am-4.3.0/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar!/META-INF/taglib.tld", Long.valueOf(1660643188000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1709439816000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.User");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClientException");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("org.apache.commons.collections.CollectionUtils");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("org.wso2.carbon.identity.recovery.IdentityRecoveryConstants");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.UsernameRecoveryApi");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.Claim");
    _jspx_imports_classes.add("org.apache.commons.collections.MapUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.constants.SelfRegistrationStatusCodes");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClient");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("org.wso2.carbon.identity.base.IdentityRuntimeException");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.utils.multitenancy.MultitenantUtils");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.recovery.util.Utils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.apache.commons.lang.ArrayUtils");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String BUNDLE = "org.wso2.carbon.identity.mgt.recovery.endpoint.i18n.Resources";
    ResourceBundle recoveryResourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale(),
            new EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String tenantDomain;
    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainInURL = request.getParameter("t");

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
        }

        if (!StringUtils.isBlank(tenantDomainInURL)) {
            tenantDomain = tenantDomainInURL;
        }
    }

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String layout = "default";

      out.write('\n');
      out.write('\n');
      out.write('\n');

    if (config.getServletContext().getResource("extensions/layouts/custom/body.ser") != null) {
        layout = "custom";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String layoutFileRelativePath;
    Map<String, Object> layoutData = new HashMap<String, Object>();

    if (!layout.equals("custom")) {
        if (layout.equals("default")) {
            layoutFileRelativePath = "includes/layouts/" + layout + "/body.ser";
        } else {
            layoutFileRelativePath = "extensions/layouts/" + layout + "/body.ser";
            if (config.getServletContext().getResource(layoutFileRelativePath) == null) {
                layout = "default";
                layoutFileRelativePath = "includes/layouts/default/body.ser";
            }
        }
    } else {
        layoutFileRelativePath = "extensions/layouts/custom/body.ser";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    boolean error = IdentityManagementEndpointUtil.getBooleanValue(request.getAttribute("error"));
    String errorMsg = IdentityManagementEndpointUtil.getStringValue(request.getAttribute("errorMsg"));
    SelfRegistrationMgtClient selfRegistrationMgtClient = new SelfRegistrationMgtClient();
    Integer defaultPurposeCatId = null;
    JSONObject usernameValidityResponse;
    String username = request.getParameter("username");
    String consentPurposeGroupName = "SELF-SIGNUP";
    String consentPurposeGroupType = "SYSTEM";
    String[] missingClaimList = new String[0];
    String[] missingClaimDisplayName = new String[0];
    Map<String, Claim> uniquePIIs = null;
    boolean piisConfigured = false;
    if (request.getParameter(Constants.MISSING_CLAIMS) != null) {
        missingClaimList = request.getParameter(Constants.MISSING_CLAIMS).split(",");
    }
    if (request.getParameter("missingClaimsDisplayName") != null) {
        missingClaimDisplayName = request.getParameter("missingClaimsDisplayName").split(",");
    }
    boolean allowchangeusername = Boolean.parseBoolean(request.getParameter("allowchangeusername"));
    boolean skipSignUpEnableCheck = Boolean.parseBoolean(request.getParameter("skipsignupenablecheck"));
    boolean isPasswordProvisionEnabled = Boolean.parseBoolean(request.getParameter("passwordProvisionEnabled"));
    boolean isSaaSApp = Boolean.parseBoolean(request.getParameter("isSaaSApp"));
    String callback = Encode.forHtmlAttribute(request.getParameter("callback"));
    User user = IdentityManagementServiceUtil.getInstance().resolveUser(username, tenantDomain, isSaaSApp);

    if (skipSignUpEnableCheck) {
        consentPurposeGroupName = "JIT";
    }
    if (StringUtils.isEmpty(username)) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Pick.username"));
        request.getRequestDispatcher("register.do").forward(request, response);
        return;
    }


    try {
          usernameValidityResponse = selfRegistrationMgtClient.checkUsernameValidityStatus(user, skipSignUpEnableCheck);
    } catch (SelfRegistrationMgtClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", IdentityManagementEndpointUtil
                .i18n(recoveryResourceBundle, "Something.went.wrong.while.registering.user") + Encode
                .forHtmlContent(username) + IdentityManagementEndpointUtil
                .i18n(recoveryResourceBundle, "Please.contact.administrator"));

        if (allowchangeusername) {
            request.getRequestDispatcher("register.do").forward(request, response);
        } else {
            IdentityManagementEndpointUtil.addErrorInformation(request, e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }
        return;
    }

    try {
        if (StringUtils.isNotBlank(callback) && !Utils.validateCallbackURL(callback, tenantDomain,
            IdentityRecoveryConstants.ConnectorConfig.SELF_REGISTRATION_CALLBACK_REGEX)) {
            request.setAttribute("error", true);
            request.setAttribute("errorMsg", IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                "Callback.url.format.invalid"));
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }
    } catch (IdentityRuntimeException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", e.getMessage());
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    if (StringUtils.isBlank(callback)) {
        callback = IdentityManagementEndpointUtil.getUserPortalUrl(
                application.getInitParameter(IdentityManagementEndpointConstants.ConfigConstants.USER_PORTAL_URL), tenantDomain);
    }
    ReCaptchaApi reCaptchaApi = new ReCaptchaApi();
    try {
        ReCaptchaProperties reCaptchaProperties = reCaptchaApi.getReCaptcha(tenantDomain, true, "ReCaptcha",
                "self-registration");
        if (reCaptchaProperties.getReCaptchaEnabled()) {
            Map<String, List<String>> headers = new HashMap<>();
            headers.put("reCaptcha", Arrays.asList(String.valueOf(true)));
            headers.put("reCaptchaAPI", Arrays.asList(reCaptchaProperties.getReCaptchaAPI()));
            headers.put("reCaptchaKey", Arrays.asList(reCaptchaProperties.getReCaptchaKey()));
            IdentityManagementEndpointUtil.addReCaptchaHeaders(request, headers);
        }
    } catch (ApiException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", e.getMessage());
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }
    Integer userNameValidityStatusCode = usernameValidityResponse.getInt("code");
    if (!SelfRegistrationStatusCodes.CODE_USER_NAME_AVAILABLE.equalsIgnoreCase(userNameValidityStatusCode.toString())) {
        if (allowchangeusername || !skipSignUpEnableCheck) {
            request.setAttribute("error", true);
            request.setAttribute("errorCode", userNameValidityStatusCode);
            if (usernameValidityResponse.has("message")) {
                if (usernameValidityResponse.get("message") instanceof String) {
                    request.setAttribute("errorMessage", usernameValidityResponse.getString("message"));
                }
            }
            request.getRequestDispatcher("register.do").forward(request, response);
        } else {
            String errorCode = String.valueOf(userNameValidityStatusCode);
            if (SelfRegistrationStatusCodes.ERROR_CODE_INVALID_TENANT.equalsIgnoreCase(errorCode)) {
                errorMsg = "Invalid tenant domain - " + user.getTenantDomain() + ".";
            } else if (SelfRegistrationStatusCodes.ERROR_CODE_USER_ALREADY_EXISTS.equalsIgnoreCase(errorCode)) {
                errorMsg = "Username '" + username + "' is already taken.";
            } else if (SelfRegistrationStatusCodes.CODE_USER_NAME_INVALID.equalsIgnoreCase(errorCode)) {
                errorMsg = user.getUsername() + " is an invalid user name. Please pick a valid username.";
            } else if (SelfRegistrationStatusCodes.ERROR_CODE_INVALID_USERSTORE.equalsIgnoreCase(errorCode)) {
                errorMsg = "Invalid user store domain - " + user.getRealm() + ".";
            }
            request.setAttribute("errorMsg", errorMsg + " Please contact the administrator to fix this issue.");
            request.setAttribute("errorCode", errorCode);
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
        return;
    }
    String purposes = selfRegistrationMgtClient.getPurposes(user.getTenantDomain(), consentPurposeGroupName,
            consentPurposeGroupType);
    boolean hasPurposes = StringUtils.isNotEmpty(purposes);
    Claim[] claims = new Claim[0];

    /**
     * Change consentDisplayType to "template" inorder to use a custom html template.
     * other Default values are "row" and "tree".
     */
    String consentDisplayType = "row";

    if (hasPurposes) {
        defaultPurposeCatId = selfRegistrationMgtClient.getDefaultPurposeId(user.getTenantDomain());
        uniquePIIs = IdentityManagementEndpointUtil.getUniquePIIs(purposes);
        if (MapUtils.isNotEmpty(uniquePIIs)) {
            piisConfigured = true;
        }
    }

    List<Claim> claimsList;
    UsernameRecoveryApi usernameRecoveryApi = new UsernameRecoveryApi();
    try {
        claimsList = usernameRecoveryApi.claimsGet(user.getTenantDomain(), false);
        uniquePIIs = IdentityManagementEndpointUtil.fillPiisWithClaimInfo(uniquePIIs, claimsList);
        if (uniquePIIs != null) {
            claims = uniquePIIs.values().toArray(new Claim[0]);
        }
        IdentityManagementEndpointUtil.addReCaptchaHeaders(request, usernameRecoveryApi.getApiClient().getResponseHeaders());

    } catch (ApiException e) {
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

      out.write('\n');

    boolean reCaptchaEnabled = false;
    if (request.getAttribute("reCaptcha") != null && "TRUE".equalsIgnoreCase((String) request.getAttribute("reCaptcha"))) {
        reCaptchaEnabled = true;
    } else if (request.getParameter("reCaptcha") != null && Boolean.parseBoolean(request.getParameter("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    layoutData.put("containerSize", "large");

      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en-US\">\n");
      out.write("<head>\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("    <script src='");
      out.print((request.getAttribute("reCaptchaAPI")));
      out.write("'></script>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    <link rel=\"stylesheet\" href=\"libs/addons/calendar.min.css\"/>\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout recovery-layout\">\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      boolean _jspx_th_layout_005fmain_005f0_reused = false;
      try {
        _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
        _jspx_th_layout_005fmain_005f0.setParent(null);
        // /self-registration-with-verification.jsp(269,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
        // /self-registration-with-verification.jsp(269,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
        // /self-registration-with-verification.jsp(269,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_layout_005fmain_005f0.setData( layoutData );
        int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
        if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f0_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /self-registration-with-verification.jsp(270,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
              int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            ");
                  out.write("\n");
                  out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
                  out.write("\n");
                  out.write("            ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("            ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
              _jspx_th_layout_005fcomponent_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f0_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f1_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /self-registration-with-verification.jsp(281,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
              int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            <div class=\"ui segment\">\n");
                  out.write("\n");
                  out.write("                <h2>\n");
                  out.write("                    ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Create.account"));
                  out.write("\n");
                  out.write("                </h2>\n");
                  out.write("                <div class=\"ui divider hidden\"></div>\n");
                  out.write("                ");
                  out.write("\n");
                  out.write("                <div class=\"segment-form\">\n");
                  out.write("                    ");
 if (skipSignUpEnableCheck) { 
                  out.write("\n");
                  out.write("                    <form class=\"ui large form\" action=\"../commonauth\" method=\"post\" id=\"register\">\n");
                  out.write("                            ");
 } else { 
                  out.write("\n");
                  out.write("                        <form class=\"ui large form\" action=\"processregistration.do\" method=\"post\" id=\"register\">\n");
                  out.write("                            ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("                            <div class=\"\">\n");
                  out.write("                                ");
 if (error) { 
                  out.write("\n");
                  out.write("                                <div class=\"ui negative message\" id=\"server-error-msg\">\n");
                  out.write("                                    ");
                  out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, errorMsg));
                  out.write("\n");
                  out.write("                                </div>\n");
                  out.write("                                ");
 } 
                  out.write("\n");
                  out.write("\n");
                  out.write("                                <div class=\"ui negative message\" id=\"error-msg\" hidden=\"hidden\">\n");
                  out.write("                                </div>\n");
                  out.write("                                <input id=\"isSaaSApp\" name=\"isSaaSApp\" type=\"hidden\"\n");
                  out.write("                                       value=\"");
                  out.print(isSaaSApp);
                  out.write("\">\n");
                  out.write("                                ");
 if (isPasswordProvisionEnabled || !skipSignUpEnableCheck) { 
                  out.write("\n");
                  out.write("                                <p>\n");
                  out.write("                                    ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Enter.fields.to.cmplete.reg"));
                  out.write("\n");
                  out.write("                                </p>\n");
                  out.write("                            </div>\n");
                  out.write("                            <div class=\"ui divider hidden\"></div>\n");
                  out.write("                            ");
                  out.write("\n");
                  out.write("                            <div>\n");
                  out.write("                                <div id=\"regFormError\" class=\"ui negative message\" style=\"display:none\"></div>\n");
                  out.write("                                <div id=\"regFormSuc\" class=\"ui positive message\" style=\"display:none\"></div>\n");
                  out.write("\n");
                  out.write("                                ");
 Claim firstNamePII =
                                        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM);
                                   Claim lastNamePII =
                                        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM);
                                    if (firstNamePII != null) {
                                        String firstNameValue = request.getParameter(IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM);
                                
                  out.write("\n");
                  out.write("                                ");
 if (lastNamePII !=null) { 
                  out.write("\n");
                  out.write("                                    <div class=\"two fields\">\n");
                  out.write("                                ");
 } 
                  out.write("\n");
                  out.write("                                    <div class=\"");
 if (firstNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write(" field\">\n");
                  out.write("                                        <label for=\"firstname\" class=\"control-label\">\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "First.name"));
                  out.write("\n");
                  out.write("                                        </label>\n");
                  out.write("                                        <input type=\"text\" name=\"http://wso2.org/claims/givenname\" class=\"form-control\" id=\"firstname\"\n");
                  out.write("                                            ");
 if (firstNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write("\n");
                  out.write("                                            ");
 if (skipSignUpEnableCheck && StringUtils.isNotEmpty(firstNameValue)) { 
                  out.write("\n");
                  out.write("                                               value=\"");
                  out.print( Encode.forHtmlAttribute(firstNameValue));
                  out.write("\" disabled ");
 } 
                  out.write(">\n");
                  out.write("                                    </div>\n");
                  out.write("                                    ");
}
                  out.write("\n");
                  out.write("\n");
                  out.write("                                    ");

                                        if (lastNamePII != null) {
                                            String lastNameValue =
                                                    request.getParameter(IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM);
                                    
                  out.write("\n");
                  out.write("                                    <div class=\"");
 if (lastNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write(" field\">\n");
                  out.write("                                        <label for=\"lastname\" class=\"control-label\">\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Last.name"));
                  out.write("\n");
                  out.write("                                        </label>\n");
                  out.write("                                        <input type=\"text\" name=\"http://wso2.org/claims/lastname\" class=\"form-control\" id=\"lastname\"\n");
                  out.write("                                            ");
 if (lastNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write("\n");
                  out.write("                                            ");
 if (skipSignUpEnableCheck && StringUtils.isNotEmpty(lastNameValue)) { 
                  out.write("\n");
                  out.write("                                               value=\"");
                  out.print( Encode.forHtmlAttribute(lastNameValue));
                  out.write("\" disabled ");
 } 
                  out.write(">\n");
                  out.write("\n");
                  out.write("                                    </div>\n");
                  out.write("                                ");
 if(firstNamePII != null ) {
                  out.write("\n");
                  out.write("                                    </div>\n");
                  out.write("                                ");
 } 
                  out.write("\n");
                  out.write("                                ");
}
                  out.write("\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <input id=\"username\" name=\"username\" type=\"hidden\"\n");
                  out.write("                                           value=\"");
                  out.print(Encode.forHtmlAttribute(username));
                  out.write("\"\n");
                  out.write("                                           class=\"form-control required usrName usrNameLength\">\n");
                  out.write("                                </div>\n");
                  out.write("                                <div class=\"two fields\">\n");
                  out.write("                                    <div class=\"required field\">\n");
                  out.write("                                        <label for=\"password\" class=\"control-label\">\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Password"));
                  out.write("\n");
                  out.write("                                        </label>\n");
                  out.write("                                        <input id=\"password\" name=\"password\" type=\"password\"\n");
                  out.write("                                               class=\"form-control\" required>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    <div class=\"required field\">\n");
                  out.write("                                        <label for=\"password2\" class=\"control-label\">\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Confirm.password"));
                  out.write("\n");
                  out.write("                                        </label>\n");
                  out.write("                                        <input id=\"password2\" name=\"password2\" type=\"password\" class=\"form-control\"\n");
                  out.write("                                               data-match=\"reg-password\" required>\n");
                  out.write("                                    </div>\n");
                  out.write("                                </div>\n");
                  out.write("\n");
                  out.write("                                ");
 Claim emailNamePII =
                                        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM);
                                    if (emailNamePII != null) {
                                        String emailValue =
                                                request.getParameter(IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM);
                                
                  out.write("\n");
                  out.write("                                <div class=\"");
 if (emailNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write(" field\">\n");
                  out.write("                                    <label for=\"email\" class=\"control-label\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Email"));
                  out.write("\n");
                  out.write("                                    </label>\n");
                  out.write("                                    <input id=\"email\" type=\"email\" name=\"http://wso2.org/claims/emailaddress\" class=\"form-control\"\n");
                  out.write("                                           data-validate=\"email\"\n");
                  out.write("                                        ");
 if (MultitenantUtils.isEmailUserName()) { 
                  out.write("\n");
                  out.write("                                           value=\"");
                  out.print( user.getUsername());
                  out.write("\" readonly\n");
                  out.write("                                       ");
 } 
                  out.write("\n");
                  out.write("                                        ");
 if (emailNamePII.getValidationRegex() != null) {
                                                String pattern = Encode.forHtmlContent(emailNamePII.getValidationRegex());
                                                String[] patterns = pattern.split("\\\\@");
                                                String regex = StringUtils.join(patterns, "@");
                                        
                  out.write("\n");
                  out.write("                                        pattern=\"");
                  out.print( regex );
                  out.write("\"\n");
                  out.write("                                        ");
 } 
                  out.write("\n");
                  out.write("                                        ");
 if (emailNamePII.getRequired() || !piisConfigured) {
                  out.write(" required ");
}
                  out.write("\n");
                  out.write("                                        ");
 if
                                            (skipSignUpEnableCheck && StringUtils.isNotEmpty(emailValue)) {
                  out.write("\n");
                  out.write("                                           value=\"");
                  out.print( Encode.forHtmlAttribute(emailValue));
                  out.write("\"\n");
                  out.write("                                           disabled");
}
                  out.write(">\n");
                  out.write("                                </div>\n");
                  out.write("                                ");

                                    }

                                    if (callback != null) {
                                
                  out.write("\n");
                  out.write("                                <input type=\"hidden\" name=\"callback\" value=\"");
                  out.print(callback );
                  out.write("\"/>\n");
                  out.write("                                ");
 for (int index = 0; index < missingClaimList.length; index++) {
                                    String claim = missingClaimList[index];
                                    String claimDisplayName = missingClaimDisplayName[index];
                                    if (!StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM)
                                            && !StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM)
                                            && !StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM)) {
                                
                  out.write("\n");
                  out.write("                                <div class=\"required field\">\n");
                  out.write("                                    <label for=\"");
                  out.print(Encode.forHtmlAttribute(claim));
                  out.write("\" class=\"control-label\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claimDisplayName));
                  out.write("\n");
                  out.write("                                    </label>\n");
                  out.write("                                    <input type=\"text\" name=\"missing-");
                  out.print(Encode.forHtmlAttribute(claim));
                  out.write("\"\n");
                  out.write("                                           id=\"");
                  out.print(Encode.forHtmlAttribute(claim));
                  out.write("\" class=\"form-control\"\n");
                  out.write("                                           required=\"required\">\n");
                  out.write("                                </div>\n");
                  out.write("                                ");
 }
                                }
                  out.write("\n");
                  out.write("                                ");

                                    }
                                    List<String> missingClaims = null;
                                    if (ArrayUtils.isNotEmpty(missingClaimList)) {
                                        missingClaims = Arrays.asList(missingClaimList);
                                    }
                                    for (Claim claim : claims) {
                                        if ((CollectionUtils.isEmpty(missingClaims) || !missingClaims.contains(claim.getUri())) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_URI_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_1_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_2_CLAIM) &&
                                                !(claim.getReadOnly() != null ? claim.getReadOnly() : false)) {
                                            String claimURI = claim.getUri();
                                            String claimValue = request.getParameter(claimURI);
                                
                  out.write("\n");
                  out.write("                                <div class=\"");
 if (claim.getRequired()) {
                  out.write(" required ");
}
                  out.write("field\">\n");
                  out.write("                                    <label for=\"country-dropdown\" ");
 if (claim.getRequired()) {
                  out.write(" class=\"control-label\" ");
}
                  out.write(">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claim.getDisplayName()));
                  out.write("\n");
                  out.write("                                    </label>\n");
                  out.write("                                    ");
 if(claimURI.contains("claims/country")) { 
                  out.write("\n");
                  out.write("                                    <div class=\"field\">\n");
                  out.write("                                        <div class=\"ui fluid search selection dropdown\"  id=\"country-dropdown\">\n");
                  out.write("                                            <input\n");
                  out.write("                                                type=\"hidden\"\n");
                  out.write("                                                name=\"");
                  out.print( Encode.forHtmlAttribute(claimURI) );
                  out.write("\"\n");
                  out.write("                                                ");
 if (claim.getRequired()) { 
                  out.write("\n");
                  out.write("                                                required\n");
                  out.write("                                                ");
 } 
                  out.write("\n");
                  out.write("                                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
                  out.write("\n");
                  out.write("                                                value=\"");
                  out.print( Encode.forHtmlAttribute(claimValue));
                  out.write("\" disabled");
}
                  out.write("\n");
                  out.write("                                            />\n");
                  out.write("                                            <i class=\"dropdown icon\"></i>\n");
                  out.write("                                            <div class=\"default text\"></div>\n");
                  out.write("                                            <div class=\"menu\">\n");
                  out.write("                                                ");
                  //  c:forEach
                  org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
                  boolean _jspx_th_c_005fforEach_005f0_reused = false;
                  try {
                    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
                    _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fcomponent_005f1);
                    // /self-registration-with-verification.jsp(471,48) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
                    _jspx_th_c_005fforEach_005f0.setItems(getCountryList());
                    // /self-registration-with-verification.jsp(471,48) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
                    _jspx_th_c_005fforEach_005f0.setVar("country");
                    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
                    try {
                      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
                      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                        do {
                          out.write("\n");
                          out.write("                                                    <div class=\"item\" data-value=\"");
                          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                          out.write("\">\n");
                          out.write("                                                        <i class=\"");
                          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.key.toLowerCase()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                          out.write(" flag\"></i>\n");
                          out.write("                                                        ");
                          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                          out.write("\n");
                          out.write("                                                    </div>\n");
                          out.write("                                                ");
                          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
                          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                            break;
                        } while (true);
                      }
                      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                        return;
                      }
                    } catch (java.lang.Throwable _jspx_exception) {
                      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
                        out = _jspx_page_context.popBody();
                      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
                    } finally {
                      _jspx_th_c_005fforEach_005f0.doFinally();
                    }
                    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
                    _jspx_th_c_005fforEach_005f0_reused = true;
                  } finally {
                    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
                  }
                  out.write("\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    ");
 } else if (claimURI.contains("claims/dob")) { 
                  out.write("\n");
                  out.write("                                    <div class=\"field\">\n");
                  out.write("                                        <div class=\"ui calendar\" id=\"date_picker\">\n");
                  out.write("                                            <div class=\"ui input right icon\" style=\"width: 100%;\">\n");
                  out.write("                                                <i class=\"calendar icon\"></i>\n");
                  out.write("                                                <input\n");
                  out.write("                                                    type=\"text\"\n");
                  out.write("                                                    autocomplete=\"off\"\n");
                  out.write("                                                    name=\"");
                  out.print( Encode.forHtmlAttribute(claimURI) );
                  out.write("\"\n");
                  out.write("                                                ");
 if (claim.getRequired()) { 
                  out.write("\n");
                  out.write("                                                    required\n");
                  out.write("                                                ");
 } 
                  out.write("\n");
                  out.write("                                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
                  out.write("\n");
                  out.write("                                                    value=\"");
                  out.print( Encode.forHtmlAttribute(claimValue));
                  out.write("\" disabled");
}
                  out.write("\n");
                  out.write("                                                />\n");
                  out.write("                                            </div>\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    ");
 } else { 
                  out.write("\n");
                  out.write("                                    <input type=\"text\" name=\"");
                  out.print( Encode.forHtmlAttribute(claimURI) );
                  out.write("\"\n");
                  out.write("                                           class=\"form-control\"\n");
                  out.write("                                        ");
 if (claim.getValidationRegex() != null) { 
                  out.write("\n");
                  out.write("                                           pattern=\"");
                  out.print( Encode.forHtmlContent(claim.getValidationRegex()) );
                  out.write("\"\n");
                  out.write("                                        ");
 } 
                  out.write("\n");
                  out.write("                                        ");
 if (claim.getRequired()) { 
                  out.write("\n");
                  out.write("                                           required\n");
                  out.write("                                        ");
 } 
                  out.write("\n");
                  out.write("                                        ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
                  out.write("\n");
                  out.write("                                           value=\"");
                  out.print( Encode.forHtmlAttribute(claimValue));
                  out.write("\" disabled");
}
                  out.write(">\n");
                  out.write("                                </div>\n");
                  out.write("                                ");

                                        }
                                    }
                                }
                                
                  out.write("\n");
                  out.write("                            </div>\n");
                  out.write("\n");
                  out.write("                            ");
 } else { 
                  out.write("\n");
                  out.write("                            <div>\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <label for=\"");
                  out.print(Encode.forHtmlAttribute(username));
                  out.write("\" class=\"control-label\">User Name\n");
                  out.write("                                    </label>\n");
                  out.write("                                    <input type=\"text\" class=\"form-control\" id=\"");
                  out.print(Encode.forHtmlAttribute(username));
                  out.write("\"\n");
                  out.write("                                           value=\"");
                  out.print(Encode.forHtmlAttribute(username));
                  out.write("\" disabled>\n");
                  out.write("                                </div>\n");
                  out.write("                                ");

                                    for (Claim claim : claims) {
                                        String claimUri = claim.getUri();
                                        String claimValue = request.getParameter(claimUri);

                                        if (StringUtils.isNotEmpty(claimValue)) { 
                  out.write("\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <label for=\"claim\" class=\"control-label\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claim.getDisplayName()));
                  out.write("\n");
                  out.write("                                    </label>\n");
                  out.write("                                    <input type=\"text\" class=\"form-control\" id=\"claim\"\n");
                  out.write("                                           value=\"");
                  out.print( Encode.forHtmlAttribute(claimValue));
                  out.write("\" disabled>\n");
                  out.write("                                </div>\n");
                  out.write("                                ");
 }
                                }
                  out.write("\n");
                  out.write("                            </div>\n");
                  out.write("                            ");
 } 
                  out.write("\n");
                  out.write("                            ");
 if (skipSignUpEnableCheck) { 
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <input type=\"hidden\" name=\"sessionDataKey\" value='");
                  out.print(Encode.forHtmlAttribute
                                        (request.getParameter("sessionDataKey")));
                  out.write("'/>\n");
                  out.write("                            </div>\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                <input type=\"hidden\" name=\"policy\" value='");
                  out.print(Encode.forHtmlAttribute
                                        (IdentityManagementServiceUtil.getInstance().getServiceContextURL().replace("/services",
                                        "/authenticationendpoint/privacy_policy.do")));
                  out.write("'/>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");
 }

                                if (hasPurposes) {
                            
                  out.write("\n");
                  out.write("                            <div class=\"ui divider hidden\"></div>\n");
                  out.write("                            <div class=\"ui secondary left aligned segment\">\n");
                  out.write("                                <p>\n");
                  out.write("                                    ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                        "Need.consent.for.following.purposes"));
                  out.write("\n");
                  out.write("                                    <span>\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                            "I.consent.to.use.them"));
                  out.write("\n");
                  out.write("                                    </span>\n");
                  out.write("                                    ");

                                        if (consentDisplayType == "template") {
                                    
                  out.write("\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                        <div class=\"consent-statement\"></div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                    ");
 } else if (consentDisplayType == "tree") { 
                  out.write("\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                        <div id=\"tree-table\"></div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                    ");

                                    } else if (consentDisplayType == "row") {
                                    
                  out.write("\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                        <div id=\"row-container\"></div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                    ");

                                        }
                                    
                  out.write("\n");
                  out.write("                                </p>\n");
                  out.write("                            </div>\n");
                  out.write("                            ");

                                }
                            
                  out.write("\n");
                  out.write("                            <div class=\"field\">\n");
                  out.write("                                ");

                                    if (reCaptchaEnabled) {
                                
                  out.write("\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <div class=\"g-recaptcha\"\n");
                  out.write("                                        data-size=\"invisible\"\n");
                  out.write("                                        data-callback=\"onCompleted\"\n");
                  out.write("                                        data-action=\"register\"\n");
                  out.write("                                        data-sitekey=\"");
                  out.print(Encode.forHtmlContent((String)request.getAttribute("reCaptchaKey")));
                  out.write("\">\n");
                  out.write("                                    </div>\n");
                  out.write("                                </div>\n");
                  out.write("                                ");

                                    }
                                
                  out.write("\n");
                  out.write("                                <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                <div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                    <div class=\"ui message info compact\" role=\"alert\">\n");
                  out.write("                                        <div>\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                                    "After.signin.we.use.a.cookie.in.browser"));
                  out.write("\n");
                  out.write("                                            <a href=\"/authenticationendpoint/cookie_policy.do\" target=\"policy-pane\">\n");
                  out.write("                                                ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                                        "Cookie.policy"));
                  out.write("\n");
                  out.write("                                            </a>\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "For.more.details"));
                  out.write("\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                </div>\n");
                  out.write("                                <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                <div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                    <div class=\"required field\">\n");
                  out.write("                                        <div class=\"ui checkbox\">\n");
                  out.write("                                            <input id=\"termsCheckbox\" type=\"checkbox\"/>\n");
                  out.write("                                            <label for=\"termsCheckbox\" >");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                                    "I.confirm.that.read.and.understood"));
                  out.write("\n");
                  out.write("                                                <a href=\"/authenticationendpoint/privacy_policy.do\" target=\"policy-pane\">\n");
                  out.write("                                                    ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Privacy.policy"));
                  out.write("\n");
                  out.write("                                                </a></label>\n");
                  out.write("                                        </div>\n");
                  out.write("                                    </div>\n");
                  out.write("                                    ");
                  out.write("\n");
                  out.write("                                </div>\n");
                  out.write("                                <div class=\"ui divider hidden\"></div>\n");
                  out.write("                                <div class=\"align-right buttons\">\n");
                  out.write("                                    <a href=\"javascript:goBack()\" class=\"ui button secondary\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Cancel"));
                  out.write("\n");
                  out.write("                                    </a>\n");
                  out.write("                                    <button id=\"registrationSubmit\"\n");
                  out.write("                                            class=\"ui primary button\"\n");
                  out.write("                                            type=\"submit\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Register"));
                  out.write("\n");
                  out.write("                                    </button>\n");
                  out.write("                                </div>\n");
                  out.write("                                <div class=\"field\">\n");
                  out.write("                                    <input id=\"isSelfRegistrationWithVerification\" type=\"hidden\"\n");
                  out.write("                                           name=\"isSelfRegistrationWithVerification\"\n");
                  out.write("                                           value=\"true\"/>\n");
                  out.write("                                    ");

                                        if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
                                    
                  out.write("\n");
                  out.write("                                    <input id=\"tenantDomain\" name=\"tenantDomain\" type=\"hidden\"\n");
                  out.write("                                           value=\"");
                  out.print(user.getTenantDomain());
                  out.write("\"/>\n");
                  out.write("                                    ");

                                        }
                                    
                  out.write("\n");
                  out.write("                                </div>\n");
                  out.write("                                ");
 if (!skipSignUpEnableCheck) { 
                  out.write("\n");
                  out.write("                                <div>\n");
                  out.write("                                        <span>\n");
                  out.write("                                            ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Already.have.account"));
                  out.write("</span>\n");
                  out.write("                                    <a href=\"javascript:history.go(-2)\"\n");
                  out.write("                                       id=\"signInLink\">\n");
                  out.write("                                        ");
                  out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Sign.in"));
                  out.write("\n");
                  out.write("                                    </a>\n");
                  out.write("                                </div>\n");
                  out.write("                                ");
 } 
                  out.write("\n");
                  out.write("                            </div>\n");
                  out.write("                        </form>\n");
                  out.write("                </div>\n");
                  out.write("            </div>\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
              _jspx_th_layout_005fcomponent_005f1_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f1, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f1_reused);
            }
            out.write("\n");
            out.write("        ");
            //  layout:component
            org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
            boolean _jspx_th_layout_005fcomponent_005f2_reused = false;
            try {
              _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
              _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
              // /self-registration-with-verification.jsp(674,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
              int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
              if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                do {
                  out.write("\n");
                  out.write("            ");
                  out.write("\n");
                  out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
                  out.write("\n");
                  out.write("            ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } else { 
                  out.write("\n");
                  out.write("            ");
                  org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
                  out.write("\n");
                  out.write("            ");
 } 
                  out.write("\n");
                  out.write("        ");
                  int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
              }
              if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
              _jspx_th_layout_005fcomponent_005f2_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fcomponent_005f2, _jsp_getInstanceManager(), _jspx_th_layout_005fcomponent_005f2_reused);
            }
            out.write("\n");
            out.write("    ");
            int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
        _jspx_th_layout_005fmain_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_layout_005fmain_005f0, _jsp_getInstanceManager(), _jspx_th_layout_005fmain_005f0_reused);
      }
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    <div id=\"attribute_selection_validation\" class=\"ui modal tiny\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h4>\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Consent.selection"));
      out.write("\n");
      out.write("            </h4>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"content\">\n");
      out.write("            ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "You.need.consent.all.claims"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"actions\">\n");
      out.write("            <button type=\"button\" class=\"ui primary button\" data-dismiss=\"modal\">\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Ok"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <div id=\"mandetory_pii_selection_validation\" class=\"ui tiny modal\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h4>\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Consent.selection"));
      out.write("\n");
      out.write("            </h4>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"content\">\n");
      out.write("            ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Need.to.select.all.mandatory.attributes"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"actions\">\n");
      out.write("            <button type=\"button\" class=\"ui primary button cancel\" data-dismiss=\"modal\">\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Ok"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/handlebars.min-v4.7.7.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/jstree/dist/jstree.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/jstree/src/jstree-actions.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/consent_template_1.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/consent_template_2.js\"></script>\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        var registrationDataKey = \"registrationData\";\n");
      out.write("        var $registerForm = $(\"#register\");\n");
      out.write("\n");
      out.write("        // Reloads the page if the page is loaded by going back in history.\n");
      out.write("        // Fixes issues with Firefox.\n");
      out.write("        window.addEventListener( \"pageshow\", function ( event ) {\n");
      out.write("            var historyTraversal = event.persisted ||\n");
      out.write("                                ( typeof window.performance != \"undefined\" &&\n");
      out.write("                                    window.performance.navigation.type === 2 );\n");
      out.write("\n");
      out.write("            if ( historyTraversal ) {\n");
      out.write("                if($registerForm){\n");
      out.write("                    $registerForm.data(\"submitted\", false);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function goBack() {\n");
      out.write("            window.history.back();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function onCompleted() {\n");
      out.write("           $(\"#register\").submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            ");

                if (error){
            
      out.write("\n");
      out.write("                var registrationData = sessionStorage.getItem(registrationDataKey);\n");
      out.write("                sessionStorage.removeItem(registrationDataKey);\n");
      out.write("\n");
      out.write("                if (registrationData){\n");
      out.write("                    var fields = JSON.parse(registrationData);\n");
      out.write("\n");
      out.write("                    if (fields.length > 0) {\n");
      out.write("                        fields.forEach(function(field) {\n");
      out.write("                            document.getElementsByName(field.name)[0].value = field.value;\n");
      out.write("                        })\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("\n");
      out.write("            var container;\n");
      out.write("            var allAttributes = [];\n");
      out.write("            var canSubmit;\n");
      out.write("\n");
      out.write("            var agreementChk = $(\".agreement-checkbox input\");\n");
      out.write("            var registrationBtn = $(\"#registrationSubmit\");\n");
      out.write("            var countryDropdown = $(\"#country-dropdown\");\n");
      out.write("\n");
      out.write("            if (agreementChk.length > 0) {\n");
      out.write("                registrationBtn.prop(\"disabled\", true).addClass(\"disabled\");\n");
      out.write("            }\n");
      out.write("            agreementChk.click(function () {\n");
      out.write("                if ($(this).is(\":checked\")) {\n");
      out.write("                    registrationBtn.prop(\"disabled\", false).removeClass(\"disabled\");\n");
      out.write("                } else {\n");
      out.write("                    registrationBtn.prop(\"disabled\", true).addClass(\"disabled\");\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            countryDropdown.dropdown('hide');\n");
      out.write("            $(\"> input.search\", countryDropdown).attr(\"role\", \"presentation\");\n");
      out.write("            $(\"#date_picker\").calendar({\n");
      out.write("                type: 'date',\n");
      out.write("                formatter: {\n");
      out.write("                    date: function (date, settings) {\n");
      out.write("                        var EMPTY_STRING = \"\";\n");
      out.write("                        var DATE_SEPARATOR = \"-\";\n");
      out.write("                        var STRING_ZERO = \"0\";\n");
      out.write("                        if (!date) return EMPTY_STRING;\n");
      out.write("                            var day = date.getDate() + EMPTY_STRING;\n");
      out.write("                        if (day.length < 2) {\n");
      out.write("                            day = STRING_ZERO + day;\n");
      out.write("                        }\n");
      out.write("                        var month = (date.getMonth() + 1) + EMPTY_STRING;\n");
      out.write("                        if (month.length < 2) {\n");
      out.write("                            month = STRING_ZERO + month;\n");
      out.write("                        }\n");
      out.write("                        var year = date.getFullYear();\n");
      out.write("                        return year + DATE_SEPARATOR + month + DATE_SEPARATOR + day;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\".form-info\").popup();\n");
      out.write("\n");
      out.write("            $(\"#register\").submit(function (e) {\n");
      out.write("\n");
      out.write("                 ");

                    if (reCaptchaEnabled) {
                
      out.write("\n");
      out.write("                if (!grecaptcha.getResponse()) {\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    grecaptcha.execute();\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("                ");

                    }
                
      out.write("\n");
      out.write("                var unsafeCharPattern = /[<>`\\\"]/;\n");
      out.write("                var elements = document.getElementsByTagName(\"input\");\n");
      out.write("                var invalidInput = false;\n");
      out.write("                var error_msg = $(\"#error-msg\");\n");
      out.write("\n");
      out.write("                for (i = 0; i < elements.length; i++) {\n");
      out.write("                    if (elements[i].type === 'text' && elements[i].value != null\n");
      out.write("                        && elements[i].value.match(unsafeCharPattern) != null) {\n");
      out.write("                        error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                            "For.security.following.characters.restricted"));
      out.write("\");\n");
      out.write("                        error_msg.show();\n");
      out.write("                        $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                        invalidInput = true;\n");
      out.write("                        return false;\n");
      out.write("                    } else if (elements[i].type === 'text' && elements[i].required && elements[i].value.trim() === \"\") {\n");
      out.write("                        error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                            "For.required.fields.cannot.be.empty"));
      out.write("\");\n");
      out.write("                        error_msg.show();\n");
      out.write("                        $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                        invalidInput = true;\n");
      out.write("                        return false;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (invalidInput) {\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var firstname = $(\"#firstname\").val();\n");
      out.write("                if (firstname && !firstname.trim()) {\n");
      out.write("                    error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Invalid.firstname"));
      out.write("\");\n");
      out.write("                    error_msg.show();\n");
      out.write("                    $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                var lastname = $(\"#lastname\").val();\n");
      out.write("                if (lastname && !lastname.trim()) {\n");
      out.write("                    error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Invalid.lastname"));
      out.write("\");\n");
      out.write("                    error_msg.show();\n");
      out.write("                    $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var password = $(\"#password\").val();\n");
      out.write("                var password2 = $(\"#password2\").val();\n");
      out.write("\n");
      out.write("                if (password !== password2) {\n");
      out.write("                    error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Passwords.did.not.match.please.try.again"));
      out.write("\");\n");
      out.write("                    error_msg.show();\n");
      out.write("                    $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if(!$(\"#termsCheckbox\")[0].checked){\n");
      out.write("                        error_msg.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                            "Confirm.Privacy.Policy"));
      out.write("\");\n");
      out.write("                        error_msg.show();\n");
      out.write("                        $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                        return false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                ");

                if (hasPurposes) {
                
      out.write("\n");
      out.write("                var self = this;\n");
      out.write("                var receipt;\n");
      out.write("                e.preventDefault();\n");
      out.write("                ");

                if (consentDisplayType == "template") {
                
      out.write("\n");
      out.write("                receipt = addReciptInformationFromTemplate();\n");
      out.write("                ");

                } else if (consentDisplayType == "tree") {
                
      out.write("\n");
      out.write("                receipt = addReciptInformation(container);\n");
      out.write("                ");

                } else if (consentDisplayType == "row")  {
                
      out.write("\n");
      out.write("                receipt = addReciptInformationFromRows();\n");
      out.write("                ");

                }
                
      out.write("\n");
      out.write("\n");
      out.write("                $('<input />').attr('type', 'hidden')\n");
      out.write("                    .attr('name', \"consent\")\n");
      out.write("                    .attr('value', JSON.stringify(receipt))\n");
      out.write("                    .appendTo('#register');\n");
      out.write("                if (canSubmit) {\n");
      out.write("                    self.submit();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                ");

                }
                
      out.write("\n");
      out.write("\n");
      out.write("                var data = $(\"#register\").serializeArray();\n");
      out.write("                var filteredData = data.filter(function(row) {\n");
      out.write("                    return !(row.name === \"password\" || row.name === \"password2\");\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                sessionStorage.setItem(registrationDataKey, JSON.stringify(filteredData));\n");
      out.write("\n");
      out.write("                return true;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            function compareArrays(arr1, arr2) {\n");
      out.write("                return $(arr1).not(arr2).length == 0 && $(arr2).not(arr1).length == 0\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            String.prototype.replaceAll = function (str1, str2, ignore) {\n");
      out.write("                return this.replace(new RegExp(str1.replace(/([\\/\\,\\!\\\\\\^$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, \"\\$&\"), (ignore ? \"gi\" : \"g\")), (typeof (str2) == \"string\") ? str2.replace(/$/g, \"$$$$\") : str2);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            Handlebars.registerHelper('grouped_each', function (every, context, options) {\n");
      out.write("                var out = \"\", subcontext = [], i;\n");
      out.write("                if (context && context.length > 0) {\n");
      out.write("                    for (i = 0; i < context.length; i++) {\n");
      out.write("                        if (i > 0 && i % every === 0) {\n");
      out.write("                            out += options.fn(subcontext);\n");
      out.write("                            subcontext = [];\n");
      out.write("                        }\n");
      out.write("                        subcontext.push(context[i]);\n");
      out.write("                    }\n");
      out.write("                    out += options.fn(subcontext);\n");
      out.write("                }\n");
      out.write("                return out;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

            if (hasPurposes) {
                if(consentDisplayType == "template") {
                    
      out.write("\n");
      out.write("            renderReceiptDetailsFromTemplate(");
      out.print(purposes);
      out.write(");\n");
      out.write("            ");

                } else if (consentDisplayType == "tree") {
            
      out.write("\n");
      out.write("            renderReceiptDetails(");
      out.print(purposes);
      out.write(");\n");
      out.write("            ");

                } else if (consentDisplayType == "row"){
            
      out.write("\n");
      out.write("            renderReceiptDetailsFromRows(");
      out.print(purposes);
      out.write(");\n");
      out.write("            ");

                }
            }
            
      out.write("\n");
      out.write("\n");
      out.write("            function renderReceiptDetails(data) {\n");
      out.write("\n");
      out.write("                var treeTemplate =\n");
      out.write("                    '<div id=\"html1\">' +\n");
      out.write("                    '<ul><li class=\"jstree-open\" data-jstree=\\'{\"icon\":\"icon-book\"}\\'>All' +\n");
      out.write("                    '<ul>' +\n");
      out.write("                    '{{#purposes}}' +\n");
      out.write("                    '<li data-jstree=\\'{\"icon\":\"icon-book\"}\\' purposeid=\"{{purposeId}}\" mandetorypurpose={{mandatory}}>' +\n");
      out.write("                    '{{purpose}}{{#if mandatory}}<span class=\"required_consent\">*</span>{{/if}} {{#if description}}<img src=\"images/info.png\" class=\"form-info\" data-toggle=\"tooltip\" data-content=\"{{description}}\" data-placement=\"right\"/>{{/if}}<ul>' +\n");
      out.write("                    '{{#piiCategories}}' +\n");
      out.write("                    '<li data-jstree=\\'{\"icon\":\"icon-user\"}\\' piicategoryid=\"{{piiCategoryId}}\" mandetorypiicatergory={{mandatory}}>{{#if displayName}}{{displayName}}{{else}}{{piiCategory}}{{/if}}{{#if mandatory}}<span class=\"required_consent\">*</span>{{/if}}</li>' +\n");
      out.write("                    '</li>' +\n");
      out.write("                    '{{/piiCategories}}' +\n");
      out.write("                    '</ul>' +\n");
      out.write("                    '{{/purposes}}' +\n");
      out.write("                    '</ul></li>' +\n");
      out.write("                    '</ul>' +\n");
      out.write("                    '</div>';\n");
      out.write("\n");
      out.write("                var tree = Handlebars.compile(treeTemplate);\n");
      out.write("                var treeRendered = tree(data);\n");
      out.write("\n");
      out.write("                $(\"#tree-table\").html(treeRendered);\n");
      out.write("\n");
      out.write("                container = $(\"#html1\").jstree({\n");
      out.write("                    plugins: [\"table\", \"sort\", \"checkbox\", \"actions\"],\n");
      out.write("                    checkbox: {\"keep_selected_style\": false},\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                container.bind('hover_node.jstree', function () {\n");
      out.write("                    var bar = $(this).find('.jstree-wholerow-hovered');\n");
      out.write("                    bar.css('height',\n");
      out.write("                        bar.parent().children('a.jstree-anchor').height() + 'px');\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                container.on('ready.jstree', function (event, data) {\n");
      out.write("                    var $tree = $(this);\n");
      out.write("                    $($tree.jstree().get_json($tree, {\n");
      out.write("                        flat: true\n");
      out.write("                    }))\n");
      out.write("                        .each(function (index, value) {\n");
      out.write("                            var node = container.jstree().get_node(this.id);\n");
      out.write("                            allAttributes.push(node.id);\n");
      out.write("                        });\n");
      out.write("                    container.jstree('open_all');\n");
      out.write("                });\n");
      out.write("\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function addReciptInformation(container) {\n");
      out.write("                // var oldReceipt = receiptData.receipts;\n");
      out.write("                var newReceipt = {};\n");
      out.write("                var services = [];\n");
      out.write("                var service = {};\n");
      out.write("                var mandatoryPiis = [];\n");
      out.write("                var selectedMandatoryPiis = [];\n");
      out.write("\n");
      out.write("                var selectedNodes = container.jstree(true).get_selected('full', true);\n");
      out.write("                var undeterminedNodes = container.jstree(true).get_undetermined('full', true);\n");
      out.write("                var allTreeNodes = container.jstree(true).get_json('#', {flat: true});\n");
      out.write("\n");
      out.write("                $.each(allTreeNodes, function (i, val) {\n");
      out.write("                    if (typeof (val.li_attr.mandetorypiicatergory) != \"undefined\" &&\n");
      out.write("                        val.li_attr.mandetorypiicatergory == \"true\") {\n");
      out.write("                        mandatoryPiis.push(val.li_attr.piicategoryid);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $.each(selectedNodes, function (i, val) {\n");
      out.write("                    if (val.hasOwnProperty('li_attr')) {\n");
      out.write("                        selectedMandatoryPiis.push(selectedNodes[i].li_attr.piicategoryid);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                var allMandatoryPiisSelected = mandatoryPiis.every(function (val) {\n");
      out.write("                    return selectedMandatoryPiis.indexOf(val) >= 0;\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                if (!allMandatoryPiisSelected) {\n");
      out.write("                    $(\"#mandetory_pii_selection_validation\").modal({blurring: true}).modal(\"show\");\n");
      out.write("                    canSubmit = false;\n");
      out.write("                } else {\n");
      out.write("                    canSubmit = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (!selectedNodes || selectedNodes.length < 1) {\n");
      out.write("                    //revokeReceipt(oldReceipt.consentReceiptID);\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                selectedNodes = selectedNodes.concat(undeterminedNodes);\n");
      out.write("                var relationshipTree = unflatten(selectedNodes); //Build relationship tree\n");
      out.write("                var purposes = relationshipTree[0].children;\n");
      out.write("                var newPurposes = [];\n");
      out.write("\n");
      out.write("                for (var i = 0; i < purposes.length; i++) {\n");
      out.write("                    var purpose = purposes[i];\n");
      out.write("                    var newPurpose = {};\n");
      out.write("                    newPurpose[\"purposeId\"] = purpose.li_attr.purposeid;\n");
      out.write("                    newPurpose['piiCategory'] = [];\n");
      out.write("                    newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("\n");
      out.write("                    var piiCategory = [];\n");
      out.write("                    var categories = purpose.children;\n");
      out.write("                    for (var j = 0; j < categories.length; j++) {\n");
      out.write("                        var category = categories[j];\n");
      out.write("                        var c = {};\n");
      out.write("                        c['piiCategoryId'] = category.li_attr.piicategoryid;\n");
      out.write("                        piiCategory.push(c);\n");
      out.write("                    }\n");
      out.write("                    newPurpose['piiCategory'] = piiCategory;\n");
      out.write("                    newPurposes.push(newPurpose);\n");
      out.write("                }\n");
      out.write("                service['purposes'] = newPurposes;\n");
      out.write("                services.push(service);\n");
      out.write("                newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("                return newReceipt;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function addReciptInformationFromTemplate() {\n");
      out.write("                var newReceipt = {};\n");
      out.write("                var services = [];\n");
      out.write("                var service = {};\n");
      out.write("                var newPurposes = [];\n");
      out.write("\n");
      out.write("                $('.consent-statement input[type=\"checkbox\"], .consent-statement strong label')\n");
      out.write("                    .each(function (i, element) {\n");
      out.write("                        var checked = $(element).prop('checked');\n");
      out.write("                        var isLable = $(element).is(\"lable\");\n");
      out.write("                        var newPurpose = {};\n");
      out.write("                        var piiCategories = [];\n");
      out.write("                        var isExistingPurpose = false;\n");
      out.write("\n");
      out.write("                        if (!isLable && checked) {\n");
      out.write("                            var purposeId = element.data(\"purposeid\");\n");
      out.write("\n");
      out.write("                            if (newPurposes.length != 0) {\n");
      out.write("                                for (var i = 0; i < newPurposes.length; i++) {\n");
      out.write("                                    var selectedPurpose = newPurposes[i];\n");
      out.write("                                    if (selectedPurpose.purposeId == purposeId) {\n");
      out.write("                                        newPurpose = selectedPurpose;\n");
      out.write("                                        piiCategories = newPurpose.piiCategory;\n");
      out.write("                                        isExistingPurpose = true;\n");
      out.write("                                    }\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        var newPiiCategory = {};\n");
      out.write("\n");
      out.write("                        newPurpose[\"purposeId\"] = element.data(\"purposeid\");\n");
      out.write("                        newPiiCategory['piiCategoryId'] = element.data(\"piicategoryid\");\n");
      out.write("                        piiCategories.push(newPiiCategory);\n");
      out.write("                        newPurpose['piiCategory'] = piiCategories;\n");
      out.write("                        newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("                        if (!isExistingPurpose) {\n");
      out.write("                            newPurposes.push(newPurpose);\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                service['purposes'] = newPurposes;\n");
      out.write("                services.push(service);\n");
      out.write("                newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("                return newReceipt;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function addReciptInformationFromRows() {\n");
      out.write("                var newReceipt = {};\n");
      out.write("                var services = [];\n");
      out.write("                var service = {};\n");
      out.write("                var newPurposes = [];\n");
      out.write("                var mandatoryPiis = [];\n");
      out.write("                var selectedMandatoryPiis = [];\n");
      out.write("\n");
      out.write("                $('#row-container input[type=\"checkbox\"]').each(function (i, checkbox) {\n");
      out.write("                    var checkboxLabel = $(checkbox).next();\n");
      out.write("                    var checked = $(checkbox).prop('checked');\n");
      out.write("                    var newPurpose = {};\n");
      out.write("                    var piiCategories = [];\n");
      out.write("                    var isExistingPurpose = false;\n");
      out.write("\n");
      out.write("                    if (checkboxLabel.data(\"mandetorypiicatergory\")) {\n");
      out.write("                        mandatoryPiis.push(checkboxLabel.data(\"piicategoryid\"));\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (checked) {\n");
      out.write("                        var purposeId = checkboxLabel.data(\"purposeid\");\n");
      out.write("                        selectedMandatoryPiis.push(checkboxLabel.data(\"piicategoryid\"));\n");
      out.write("                        if (newPurposes.length != 0) {\n");
      out.write("                            for (var i = 0; i < newPurposes.length; i++) {\n");
      out.write("                                var selectedPurpose = newPurposes[i];\n");
      out.write("                                if (selectedPurpose.purposeId == purposeId) {\n");
      out.write("                                    newPurpose = selectedPurpose;\n");
      out.write("                                    piiCategories = newPurpose.piiCategory;\n");
      out.write("                                    isExistingPurpose = true;\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        var newPiiCategory = {};\n");
      out.write("\n");
      out.write("                        newPurpose[\"purposeId\"] = checkboxLabel.data(\"purposeid\");\n");
      out.write("                        newPiiCategory['piiCategoryId'] = checkboxLabel.data(\"piicategoryid\");\n");
      out.write("                        piiCategories.push(newPiiCategory);\n");
      out.write("                        newPurpose['piiCategory'] = piiCategories;\n");
      out.write("                        newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("                        if (!isExistingPurpose) {\n");
      out.write("                            newPurposes.push(newPurpose);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                service['purposes'] = newPurposes;\n");
      out.write("                services.push(service);\n");
      out.write("                newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("                var allMandatoryPiisSelected = mandatoryPiis.every(function (val) {\n");
      out.write("                    return selectedMandatoryPiis.indexOf(val) >= 0;\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                if (!allMandatoryPiisSelected) {\n");
      out.write("                    $(\"#mandetory_pii_selection_validation\").modal({blurring: true}).modal(\"show\");\n");
      out.write("                    canSubmit = false;\n");
      out.write("                } else {\n");
      out.write("                    canSubmit = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return newReceipt;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function unflatten(arr) {\n");
      out.write("                var tree = [],\n");
      out.write("                    mappedArr = {},\n");
      out.write("                    arrElem,\n");
      out.write("                    mappedElem;\n");
      out.write("\n");
      out.write("                // First map the nodes of the array to an object -> create a hash table.\n");
      out.write("                for (var i = 0, len = arr.length; i < len; i++) {\n");
      out.write("                    arrElem = arr[i];\n");
      out.write("                    mappedArr[arrElem.id] = arrElem;\n");
      out.write("                    mappedArr[arrElem.id]['children'] = [];\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for (var id in mappedArr) {\n");
      out.write("                    if (mappedArr.hasOwnProperty(id)) {\n");
      out.write("                        mappedElem = mappedArr[id];\n");
      out.write("                        // If the element is not at the root level, add it to its parent array of children.\n");
      out.write("                        if (mappedElem.parent && mappedElem.parent != \"#\" && mappedArr[mappedElem['parent']]) {\n");
      out.write("                            mappedArr[mappedElem['parent']]['children'].push(mappedElem);\n");
      out.write("                        }\n");
      out.write("                        // If the element is at the root level, add it to first level elements array.\n");
      out.write("                        else {\n");
      out.write("                            tree.push(mappedElem);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                return tree;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function renderReceiptDetailsFromTemplate(receipt) {\n");
      out.write("                /*\n");
      out.write("                 *   Available when consentDisplayType is set to \"template\"\n");
      out.write("                 *   customConsentTempalte1 is from the js file which is loaded as a normal js resource\n");
      out.write("                 *   also try customConsentTempalte2 located at assets/js/consent_template_2.js\n");
      out.write("                 */\n");
      out.write("                var templateString = customConsentTempalte1;\n");
      out.write("                var purp, purpose, piiCategory, piiCategoryInputTemplate;\n");
      out.write("                $(receipt.purposes).each(function (i, e) {\n");
      out.write("                    purp = e.purpose;\n");
      out.write("                    purpose = \"{{purpose:\" + purp + \"}}\";\n");
      out.write("                    var purposeInputTemplate = '<strong data-id=\"' + purpose + '\">' + purp + '</strong>';\n");
      out.write("                    templateString = templateString.replaceAll(purpose, purposeInputTemplate);\n");
      out.write("                    $(e.piiCategories).each(function (i, ee) {\n");
      out.write("                        piiCategory = \"{{pii:\" + purp + \":\" + ee.displayName + \"}}\";\n");
      out.write("                        var piiCategoryMin = piiCategory.replace(/\\s/g, '');\n");
      out.write("                        if (ee.mandatory == true) {\n");
      out.write("                            piiCategoryInputTemplate = '<strong><label id=\"' + piiCategoryMin + '\" data-id=\"' +\n");
      out.write("                                piiCategory + '\" data-piiCategoryId=\"' + ee.piiCategoryId + '\" data-purposeId=\"' +\n");
      out.write("                                e.purposeId + '\" data-mandetoryPiiCategory=\"' + ee.mandatory + '\">' + ee.displayName +\n");
      out.write("                                '<span class=\"required_consent\">*</span></label></strong>';\n");
      out.write("                        } else {\n");
      out.write("                            piiCategoryInputTemplate = '<span><label for=\"' + piiCategoryMin + '\"><input type=\"checkbox\" id=\"' + piiCategoryMin + '\" data-id=\"' +\n");
      out.write("                                piiCategory + '\" data-piiCategoryId=\"' + ee.piiCategoryId + '\" data-purposeId=\"' + e.purposeId + '\"' +\n");
      out.write("                                'data-mandetoryPiiCategory=\"' + ee.mandatory + '\" name=\"\" value=\"\">' + ee.displayName + '</label></span>';\n");
      out.write("                        }\n");
      out.write("                        templateString = templateString.replaceAll(piiCategory, piiCategoryInputTemplate);\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(\".consent-statement\").html(templateString);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function renderReceiptDetailsFromRows(data) {\n");
      out.write("                var rowTemplate =\n");
      out.write("                    '{{#purposes}}' +\n");
      out.write("                    '<div class=\"ui bulleted list\">' +\n");
      out.write("                    '<div class=\"item\"><span>{{purpose}} {{#if description}}<i id=\"description\" class=\"info circle icon\" data-variation=\"inverted\" data-content=\"{{description}}\" data-placement=\"right\"></i>{{/if}}</span></div></div>' +\n");
      out.write("                    '<div class=\"ui form\">' +\n");
      out.write("                    '{{#grouped_each 2 piiCategories}}' +\n");
      out.write("                    '{{#each this }}' +\n");
      out.write("                    '<div class=\"{{#if mandatory}}required{{/if}} field\">'+\n");
      out.write("                    '<div class=\"ui checkbox\">' +\n");
      out.write("                    '<input type=\"checkbox\" name=\"switch\" id=\"consent-checkbox-{{../../purposeId}}-{{piiCategoryId}}\" {{#if mandatory}}required{{/if}} />' +\n");
      out.write("                    '<label for=\"consent-checkbox-{{../../purposeId}}-{{piiCategoryId}}\" data-piicategoryid=\"{{piiCategoryId}}\" data-mandetorypiicatergory=\"{{mandatory}}\" data-purposeid=\"{{../../purposeId}}\">' +\n");
      out.write("                    '<span>{{#if displayName}}{{displayName}}{{else}}{{piiCategory}}{{/if}}</span>'+\n");
      out.write("                    '</label></div>' +\n");
      out.write("                    '</div>'+\n");
      out.write("                    '{{/each}}' +\n");
      out.write("                    '{{/grouped_each}}' +\n");
      out.write("                    '</div>' +\n");
      out.write("                    '{{/purposes}}';\n");
      out.write("                var rows = Handlebars.compile(rowTemplate);\n");
      out.write("                var rowsRendered = rows(data);\n");
      out.write("                $(\"#row-container\").html(rowsRendered);\n");
      out.write("                $(\"#description\").popup();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("    <script src=\"libs/addons/calendar.min.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
